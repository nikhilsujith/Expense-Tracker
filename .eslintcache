[{"/Users/niks/Projects/My Projects/MERN/expense-tracker/src/index.js":"1","/Users/niks/Projects/My Projects/MERN/expense-tracker/src/App.js":"2","/Users/niks/Projects/My Projects/MERN/expense-tracker/src/components/Details/Details.jsx":"3","/Users/niks/Projects/My Projects/MERN/expense-tracker/src/components/Details/styles.js":"4","/Users/niks/Projects/My Projects/MERN/expense-tracker/src/styles.js":"5","/Users/niks/Projects/My Projects/MERN/expense-tracker/src/components/Main/Main.jsx":"6","/Users/niks/Projects/My Projects/MERN/expense-tracker/src/components/Main/styles.js":"7","/Users/niks/Projects/My Projects/MERN/expense-tracker/src/components/Main/Form/Form.jsx":"8","/Users/niks/Projects/My Projects/MERN/expense-tracker/src/components/Main/Form/styles.js":"9","/Users/niks/Projects/My Projects/MERN/expense-tracker/src/components/Main/List/List.jsx":"10","/Users/niks/Projects/My Projects/MERN/expense-tracker/src/components/Main/List/styles.js":"11","/Users/niks/Projects/My Projects/MERN/expense-tracker/src/context/context.js":"12","/Users/niks/Projects/My Projects/MERN/expense-tracker/src/context/contextReducer.js":"13","/Users/niks/Projects/My Projects/MERN/expense-tracker/src/constants/categories.js":"14","/Users/niks/Projects/My Projects/MERN/expense-tracker/src/utils/formatDate.js":"15","/Users/niks/Projects/My Projects/MERN/expense-tracker/src/useTransactions.js":"16","/Users/niks/Projects/My Projects/MERN/expense-tracker/src/components/SnackBar/Snackbar.jsx":"17","/Users/niks/Projects/My Projects/MERN/expense-tracker/src/components/SnackBar/styles.js":"18","/Users/niks/Projects/My Projects/MERN/expense-tracker/src/components/InfoCard.jsx":"19"},{"size":437,"mtime":1608836606351,"results":"20","hashOfConfig":"21"},{"size":2605,"mtime":1608847598452,"results":"22","hashOfConfig":"21"},{"size":791,"mtime":1608830591866,"results":"23","hashOfConfig":"21"},{"size":237,"mtime":1608593211000,"results":"24","hashOfConfig":"21"},{"size":552,"mtime":1608846428143,"results":"25","hashOfConfig":"21"},{"size":1282,"mtime":1608848312071,"results":"26","hashOfConfig":"21"},{"size":490,"mtime":1608593302000,"results":"27","hashOfConfig":"21"},{"size":5641,"mtime":1608844786866,"results":"28","hashOfConfig":"21"},{"size":235,"mtime":1608593244172,"results":"29","hashOfConfig":"30"},{"size":2241,"mtime":1608824297360,"results":"31","hashOfConfig":"21"},{"size":399,"mtime":1608593382000,"results":"32","hashOfConfig":"21"},{"size":1669,"mtime":1608841713117,"results":"33","hashOfConfig":"21"},{"size":937,"mtime":1608841065244,"results":"34","hashOfConfig":"21"},{"size":1659,"mtime":1608824448645,"results":"35","hashOfConfig":"21"},{"size":358,"mtime":1608826897792,"results":"36","hashOfConfig":"21"},{"size":2411,"mtime":1608832831489,"results":"37","hashOfConfig":"21"},{"size":768,"mtime":1608843755000,"results":"38","hashOfConfig":"21"},{"size":196,"mtime":1608843619728,"results":"39","hashOfConfig":"21"},{"size":470,"mtime":1608845202547,"results":"40","hashOfConfig":"21"},{"filePath":"41","messages":"42","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"43"},"f1ny0p",{"filePath":"44","messages":"45","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"43"},{"filePath":"46","messages":"47","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"43"},{"filePath":"48","messages":"49","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"43"},{"filePath":"50","messages":"51","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"43"},{"filePath":"52","messages":"53","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"54","usedDeprecatedRules":"43"},{"filePath":"55","messages":"56","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"43"},{"filePath":"57","messages":"58","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"59","usedDeprecatedRules":"43"},{"filePath":"60","messages":"61","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"5433b4",{"filePath":"62","messages":"63","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"43"},{"filePath":"64","messages":"65","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"43"},{"filePath":"66","messages":"67","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"43"},{"filePath":"68","messages":"69","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"43"},{"filePath":"70","messages":"71","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"43"},{"filePath":"72","messages":"73","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"43"},{"filePath":"74","messages":"75","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"43"},{"filePath":"76","messages":"77","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"43"},{"filePath":"78","messages":"79","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"80"},{"filePath":"81","messages":"82","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"43"},"/Users/niks/Projects/My Projects/MERN/expense-tracker/src/index.js",[],["83","84"],"/Users/niks/Projects/My Projects/MERN/expense-tracker/src/App.js",[],"/Users/niks/Projects/My Projects/MERN/expense-tracker/src/components/Details/Details.jsx",[],"/Users/niks/Projects/My Projects/MERN/expense-tracker/src/components/Details/styles.js",[],"/Users/niks/Projects/My Projects/MERN/expense-tracker/src/styles.js",[],"/Users/niks/Projects/My Projects/MERN/expense-tracker/src/components/Main/Main.jsx",["85"],"import React, { useContext } from 'react'\nimport{ Card, CardHeader, CardContent, Typography, Grid, Divider } from '@material-ui/core';\nimport { ExpenseTrackerContext } from '../../context/context';\n\nimport useStyles from './styles';\n\nimport Form from './Form/Form';\nimport List from './List/List';\n\nimport InfoCard from '../InfoCard';\n\nconst Main = () => {\n    const classes = useStyles();\n    const { balance } = useContext(ExpenseTrackerContext);\n\n    return (\n        <Card className = {classes.root}>\n            <CardHeader title = \"Expense Tracker\" />\n            <CardContent>\n                <Typography variant=\"h5\" align=\"center\">Total Balance ${balance}</Typography>\n                {/* <Typography variant=\"subheader\" style={{ lineHeight: '1.5em', marginTop: '20px' }}>\n                    <InfoCard></InfoCard>\n                </Typography> */}\n                <Divider />\n                <Form />\n                </CardContent>\n                <CardContent className = { classes.CardContent }>\n                    <Grid container spacing = { 2 }>\n                        <Grid item xs = { 12 }>\n                            <List />\n                        </Grid>\n                    </Grid>\n                </CardContent>\n        </Card>\n    )\n}\n\nexport default Main\n","/Users/niks/Projects/My Projects/MERN/expense-tracker/src/components/Main/styles.js",[],"/Users/niks/Projects/My Projects/MERN/expense-tracker/src/components/Main/Form/Form.jsx",["86"],"import React, { useState, useContext, useEffect } from 'react'\nimport { TextField, Typography, Grid, Button, FormControl, InputLabel, Select, MenuItem } from '@material-ui/core'\nimport useStyles from '../styles';\nimport { ExpenseTrackerContext } from '../../../context/context';\nimport { v4 as uuidv4 } from 'uuid';\nimport { useSpeechContext } from '@speechly/react-client';\n// importing categories from categories file [this could be a database with nodejs]\nimport { incomeCategories, expenseCategories } from '../../../constants/categories' \n// importing date format\nimport formatDate from '../../../utils/formatDate';\nimport CustomizedSnackbar from '../../SnackBar/Snackbar'\n\n\n\n\nconst initialState = {\n    amount: '', \n    category: '',\n    type: '',\n    date: formatDate(new Date()),\n}\nconst Form = () => {\n    \n    const classes = useStyles();\n    const [formData, setFormData] = useState(initialState);\n    const { addTransaction } = useContext(ExpenseTrackerContext);\n    const { segment } = useSpeechContext();\n    const [open, setOpen] = useState(false);\n\n    const createTransaction = () =>{\n        if(Number.isNaN(Number(formData.amount)) || !formData.date.includes('-')) return;\n        const transaction = { ...formData, amount: Number(formData.amount), id: uuidv4()}\n        \n        setOpen(true);\n        addTransaction(transaction); //send the whole transaction object to context > addTransaction method\n        setFormData(initialState); //reset form to blank AKA initial state\n    }\n\n    useEffect( () => {\n        if(segment){\n            if(segment.intent.intent === 'add_expense'){\n                setFormData({ ...formData, type: 'Expense' });\n            }\n            else if(segment.intent.intent === 'add_income'){\n                setFormData({...formData, type: 'Income'});\n            }\n            else if(segment.isFinal && segment.intent.intent === \"create_transaction\") {\n                return createTransaction();\n            }\n            else  if(segment.isFinal && segment.intent.intent === \"cancel_transaction\") {\n                return setFormData(initialState);\n            }\n\n            segment.entities.forEach((e) => {\n                const category = `${e.value.charAt(0)}${e.value.slice(1).toLowerCase()}`;\n\n                switch(e.type){\n                    case 'amount' :\n                        setFormData({ ...formData, amount: e.value});\n                        break;\n                    case 'category':\n                        if(incomeCategories.map( (ic) => ic.type ).includes(category)){\n                            setFormData({ ...formData, type: 'Income', category });\n                        }\n                        else if(expenseCategories.map( (ic) => ic.type ).includes(category)){\n                            setFormData({ ...formData, type: 'Expense', category  });\n                        }\n                        \n                        break;\n                    case 'date':\n                        setFormData({ ...formData, date: e.value });\n                        break;\n                    default:\n                        break;\n                }\n            })\n\n            if(segment.isFinal && formData.amount && formData.category && formData.type && formData.date){\n                createTransaction();\n            }\n        }\n    }, [segment] )\n\n//    Variable to store the category needed based on what's selected in the form\n    const selectedCategories = formData.type === 'Income' ? incomeCategories : expenseCategories;\n\n    return (\n        <Grid container spacing = { 2 }>\n            <CustomizedSnackbar open={open} setOpen={setOpen}></CustomizedSnackbar> \n            <Grid item xs = {12}>\n                <Typography align = \"center\" variant = \"subtitle2\" guttterButtom>\n                    { \n                        segment ? (\n                            <>\n                                {segment.words.map((w) => w.value).join(\"  \")}\n                            </> \n                        ): null \n                    } \n                </Typography>\n            </Grid>\n            <Grid item xs = { 6 }>\n                <FormControl fullWidth>\n                    <InputLabel>Type</InputLabel>\n                    <Select value={formData.type} onChange = {(e)=> setFormData({ ...formData, type:e.target.value })}>\n                       <MenuItem value=\"Income\">Income</MenuItem>\n                       <MenuItem value=\"Expense\">Expense</MenuItem>\n                    </Select>\n                </FormControl>\n            </Grid>\n            <Grid item xs = { 6 }>\n                <FormControl fullWidth>\n                    <InputLabel>Category</InputLabel>\n                    <Select value={formData.category} onChange={(e) => setFormData( {...formData, category: e.target.value} ) }>\n                        { selectedCategories.map( (c) => <MenuItem key={ c.type } value = {c.type}>{c.type}</MenuItem> )}\n                    </Select>\n                </FormControl>\n            </Grid>\n            <Grid item xs = { 6 }>\n                <TextField type=\"number\" label=\"Amount\" value={formData.amount} onChange={(e) => setFormData( { ...formData, amount: e.target.value } ) } fullWidth />\n\n            </Grid>\n            <Grid item xs = { 6 }> \n                <TextField type=\"date\" label=\"Date\" value={formData.date} onChange={ (e) => setFormData( { ...formData, date: formatDate(e.target.value) } ) } fullWidth />\n            </Grid>\n            <Button className = { classes.Button } variant = \"outlined\" color=\"primary\" fullWidth onClick={createTransaction}> Create </Button>\n        </Grid>\n    )\n}\n\nexport default Form\n","/Users/niks/Projects/My Projects/MERN/expense-tracker/src/components/Main/Form/styles.js",[],"/Users/niks/Projects/My Projects/MERN/expense-tracker/src/components/Main/List/List.jsx",[],"/Users/niks/Projects/My Projects/MERN/expense-tracker/src/components/Main/List/styles.js",[],"/Users/niks/Projects/My Projects/MERN/expense-tracker/src/context/context.js",[],"/Users/niks/Projects/My Projects/MERN/expense-tracker/src/context/contextReducer.js",[],"/Users/niks/Projects/My Projects/MERN/expense-tracker/src/constants/categories.js",[],"/Users/niks/Projects/My Projects/MERN/expense-tracker/src/utils/formatDate.js",[],"/Users/niks/Projects/My Projects/MERN/expense-tracker/src/useTransactions.js",[],"/Users/niks/Projects/My Projects/MERN/expense-tracker/src/components/SnackBar/Snackbar.jsx",[],"/Users/niks/Projects/My Projects/MERN/expense-tracker/src/components/SnackBar/styles.js",[],["87","88"],"/Users/niks/Projects/My Projects/MERN/expense-tracker/src/components/InfoCard.jsx",[],{"ruleId":"89","replacedBy":"90"},{"ruleId":"91","replacedBy":"92"},{"ruleId":"93","severity":1,"message":"94","line":10,"column":8,"nodeType":"95","messageId":"96","endLine":10,"endColumn":16},{"ruleId":"97","severity":1,"message":"98","line":82,"column":8,"nodeType":"99","endLine":82,"endColumn":17,"suggestions":"100"},{"ruleId":"89","replacedBy":"101"},{"ruleId":"91","replacedBy":"102"},"no-native-reassign",["103"],"no-negated-in-lhs",["104"],"no-unused-vars","'InfoCard' is defined but never used.","Identifier","unusedVar","react-hooks/exhaustive-deps","React Hook useEffect has missing dependencies: 'createTransaction' and 'formData'. Either include them or remove the dependency array. You can also do a functional update 'setFormData(f => ...)' if you only need 'formData' in the 'setFormData' call.","ArrayExpression",["105"],["103"],["104"],"no-global-assign","no-unsafe-negation",{"desc":"106","fix":"107"},"Update the dependencies array to be: [createTransaction, formData, segment]",{"range":"108","text":"109"},[3324,3333],"[createTransaction, formData, segment]"]